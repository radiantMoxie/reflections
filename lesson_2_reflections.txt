What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, a .git file is created that will contain all
the metadata associated with the commits you make. You need to do it so Git 
knows which files you want to track. Initially there are 0 commits in the
repository since the user always initiates commits with notes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area holds the files that are ready to be committed. The working
directory holds all the files that we're going to be working on, and the 
repository holds the commits that have already been made. It's a sorta "on-deck"
area where things are held and (I imagine) also able to be changed without 
being added to the repository.

I kept not getting the answer, so I'm adding some lines here.

How can you use the staging area to make sure you have one commit per logical 
change?

You can check what it's in the staging area and only pick the files you want to
add. So if you had 2 logical changes you were working on, you could commit them
individually but at the same time.

What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

Branches would likely be super helpful when experimenting with new features that
you think might explode your code and/or that you think might be fun/awesome, 
but you're really not sure. For example, an aspect of a videogame that you think
will be awesome, but sometimes it's not as fun in practice as in concept and you
want to go back to the game before you added the features. Or they might be 
helpful if you wanted to just try something crazy and experimental!

How do the diagrams help you visualize the branch structure?

At first I must admit that I was not a fan of Sarah's lessons. They seemed a lot
less obvious than Caroline's and since I'm wearing headphones she has an odd 
smacking in her mouth that is quite apparent. However, I'm finding the diagrams
quite helpful. It gives me a better idea of what exactly is being saved at one 
time. What really interests me now is why trees play such a big part in computer
science. Were the early developers very much influenced by their environment, 
being mostly on the West Coast and seeing lots of trees? Would CS be where it is
now without the major hubs being on the West Coast?

What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?

Merging two branches together compares the changes made in the two branches and
since those two branches may have been written by different people, can be very 
helpful. It's represented in the diagram and in the vocabulary as merging into 
the master branch. What I find confusing, though, is how this can be done. The
example shown in the lesson had ABCDE lines as examples and discluded the lines 
that either collaborator had explcitly deleted. But if this were code, what if 
one of the lines added and that got to stay depended on a line that got deleted
in the commit? Many times code is depending on other code, like with helper 
functions.